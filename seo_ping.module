<?php

/**
 * Implements hook_action_info().
 * 
 * @see hook_action_info()
 */
function seo_ping_action_info() {
  return array(
    'seo_ping_node_ping' => array(
      'type' => 'node',
      'label' => t('Ping Services'),
      'configurable' => TRUE,
      'behavior' => array('changes_property'),
      'triggers' => array('node_presave', 'node_insert', 'node_update'),
    ),
  );
}

/**
 * Generates an array with node type machine name as key and the human
 * readable name as value
 *
 * @return array
 *   Node types options array.
 *
 * @see node_type_get_types()
 */
function _node_types_options(){
  $node_types = node_type_get_types();
  $nodes=array();
  foreach ($node_types as $type => $value){
    $nodes[$type] = $value->name;
  }
  return $nodes;
}

/**
 * Generates settings form for seo_ping_node_ping().
 *
 * @param array $context
 *   An array of options of this action (in case it is being edited)
 *
 * @return array
 *   Settings form as Form API array.
 *
 * @see seo_ping_action_info()
 */
function seo_ping_node_ping_form($context) {

  $form['node_type'] = array(
    '#title' => t('Content Type'),
    '#type' => 'select',
    '#multiple' => TRUE,
    '#required' => TRUE,
    '#options'=> _node_types_options(),
    '#description' => t('Node type that will be pinged'),
    '#default_value' => isset($context['node_type']) ? $context['node_type'] : '',
  );
  
  $form['ping_service'] = array(
    '#title' => t('Ping service url'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#size' => 60,
    '#description' => t('The RPC url of the remote service, http included'),
    '#default_value' => isset($context['ping_service']) ? $context['ping_service'] : '',
  );
  $form['ping_port'] = array(
    '#title' => t('Ping service port'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#size' => 6,
    '#description' => t('The RPC server port'),
    '#default_value' => isset($context['ping_port']) ? $context['ping_port'] : 80,
  );
  $form['ping_method'] = array(
    '#title' => t('Ping service url'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#description' => t('Write the RPC data method. Usualy : weblogUpdates.ping'),
    '#default_value' => isset($context['ping_method']) ? $context['ping_method'] : 'weblogUpdates.ping',
  );
  $form['ping_types'] = array(
    '#title' => t('Ping service url'),
    '#type' => 'checkboxes',
    '#multiple' => TRUE,
    '#required' => TRUE,
    '#options' =>drupal_map_assoc(array('title' => t('Title'),'url' => t('Url Address'), 'category'=> t('Category'), 'sitemap'=>t('Sitemap'),'author'=>t('Author'))),
    '#description' => t('Select available fields for sending'),
    '#default_value' => isset($context['ping_types']) ? $context['ping_types'] : '',
  );
  $form['title_name'] = array(
    '#title' => t('Field title name'),
    '#type' => 'textfield',
    '#description' => t('Field title name'),
    '#default_value' => isset($context['title_name']) ? $context['title_name'] : '',
    '#states' => array(
      'visible' => array(
        ':input[name="ping_types[Title]"]' => array('checked' => TRUE),
      ),
      'required' => array(
        ':input[name="ping_types[Title]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['url_name'] = array(
    '#title' => t('Field url name'),
    '#type' => 'textfield',
    '#description' => t('Field url name'),
    '#default_value' => isset($context['url_name']) ? $context['url_name'] : '',
    '#states' => array(
      'visible' => array(
        ':input[name="ping_types[Url Address]"]' => array('checked' => TRUE),
      ),
      'required' => array(
        ':input[name="ping_types[Url Address]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['category_name'] = array(
    '#title' => t('Field url name'),
    '#type' => 'textfield',
    '#description' => t('Field url name'),
    '#default_value' => isset($context['url_name']) ? $context['url_name'] : '',
    '#states' => array(
      'visible' => array(
        ':input[name="ping_types[Url Address]"]' => array('checked' => TRUE),
      ),
      'required' => array(
        ':input[name="ping_types[Url Address]"]' => array('checked' => TRUE),
      ),
    ),
  );
  return $form;
}

/**
 * Validates settings form for seo_ping_node_ping_form().
 *
 */
function seo_ping_node_ping_validate($form, $form_state) {
  if ($form_state['values']['ping_port'] != '' && !is_numeric($form_state['values']['ping_port'])) {
    form_set_error('ping_port', t('Ping Port must be a number.'));
  }
  if (valid_url($form_state['values']['ping_service'],TRUE) != TRUE){
    form_set_error('ping_service', t('Ping Service must be a valid URL.'));
  }
}


/**
 * Submit handler for seo_ping_node_ping.
 *
 * Returns an associative array of values which will be available in the
 * $context when an action is executed.
 */
function seo_ping_node_ping_submit($form, $form_state) {
  return array(
  'node_type' => $form_state['values']['node_type'],
  'ping_service' => $form_state['values']['ping_service'],
  'ping_port'=>$form_state['values']['ping_port']
  );
}

/**
 * Action function for seo_ping_node_ping.
 * @param object $node
 *   A node object provided by the associated trigger.
 * @param array $context
 *   Array with the following elements:
 *   - 'author': username of the author's content this function will promote and
 *     set as sticky.
 */
function seo_ping_node_ping($node, $context) {
debug($node->type);
debug($context['node_type']);
  if (in_array($node->type, array_keys($context['node_type']))){
    $nodeurl = url(drupal_get_path_alias('node/' . $node->nid), array('absolute' => TRUE));
    $nodetitle = $node->title;
    $call = xmlrpc($context['ping_service'], array(
        'weblogUpdates.ping' => array(
           'title' => $node->title,
           'url' => $nodeurl,
        )
    )
    );
    debug($call);
  }
}
